<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'LG' ? 'Proyecto Live Group' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalabel=no,initial-scale=1.0,maximun-scale=1.0,minium-scale=1.0">
    <link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/linker/styles/app.css">
    <link rel="stylesheet" href="/linker/styles/custom.css">
    <link rel="stylesheet" href="/linker/styles/flexboxgrid.css">
    <link rel="stylesheet" href="/linker/styles/flexboxgrid.min.css">
    <link rel="stylesheet" href="/linker/styles/materialize.css">
    <!--STYLES END-->
  </head>

  <body>
    <% if(session.authenticated) { %>
    <header>
    <div class="Header-Info row between-xs">
        <div class="Header-User col-xs-3">
          <div class="User row">

            <div class="col-xs-3"><img src="images/50x50.png" class="circle"></div>
            <div class="col-xs">
              <li class="active"><p href="/user/show<%= session.User.id %>"> <%= session.User.name + " " + session.User.lastname %></p></li>
              <p>Lugar de trabajo</p>
              <a href="/session/destroy">Cerrar Sesi√≥n</a>
            </div>

          </div>
        </div>
        <div class="Header-Logo col-xs-3">
          <% if(session.authenticated) { %>
          <div class="Logo row end-xs"><img src="images/150x50.png"></div>

          <% } %>
        </div>
      </div>
      <div class="Header-Nav">
        <div class="Nav-Items row around-xs">
          <% if(session.authenticated) { %>
          <a href="index.html" class="Nav-Item is-active">Anuncios</a>
          <a class="Nav-Item">Turnos</a>
          <% } %>
          <% if(session.authenticated && session.User.admin) { %>
          <a href="/group/show" class="Nav-Item">Grupo</a>
          <a class="Nav-Item">Admin</a></div>
          <% } %>

      </div>
    </header>
    <% } %>

    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/jquery.min.js"></script>
    <script src="/linker/js/materialize.js"></script>
    <!--SCRIPTS END-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  </body>
</html>
